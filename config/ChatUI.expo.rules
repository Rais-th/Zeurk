### **Création d'une Interface de Chat Réactive et Adaptative dans React Native**

Cette documentation explique comment construire une interface de chat moderne qui s'adapte aux messages, au clavier et offre une expérience utilisateur fluide. Nous nous baserons sur les principes et les composants utilisés dans `src/screens/SupportChatScreen.js`.

#### **1. Structure des Composants Clés**

Pour une interface de chat, les composants principaux sont :

*   **`SafeAreaView`** : Assure que le contenu ne chevauche pas les zones sécurisées (encoches, barres d'état, etc.).
*   **`KeyboardAvoidingView`** : Très important pour que l'interface s'ajuste lorsque le clavier apparaît, évitant que le champ de saisie ne soit caché.
*   **`FlatList`** : Le composant idéal pour afficher une liste de messages performante, car il ne rend que les éléments visibles à l'écran.
*   **`TextInput`** : Pour la saisie du message de l'utilisateur.
*   **`TouchableOpacity`** : Pour le bouton d'envoi.
*   **`View`** et **`Text`** : Pour structurer et afficher les bulles de message.

**Exemple de structure de base (inspiré de `SupportChatScreen.js`) :**

```jsx
import React, { useState, useRef, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  // ... autres imports nécessaires
} from 'react-native';

export default function ChatInterface() {
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const flatListRef = useRef(null);

  // ... logiques pour l'envoi de messages, le scroll, etc.

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 0} // Ajustez si nécessaire
      >
        {/* En-tête de la discussion (optionnel) */}
        <View style={styles.header}>
          <Text style={styles.headerText}>Mon Chat</Text>
        </View>

        {/* Liste des messages */}
        <FlatList
          ref={flatListRef}
          data={messages}
          renderItem={renderMessage} // Fonction de rendu pour chaque message
          keyExtractor={item => item.id}
          style={styles.messageList}
          contentContainerStyle={styles.messageListContent}
        />

        {/* Conteneur de saisie de texte */}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            value={inputText}
            onChangeText={setInputText}
            placeholder="Écrivez votre message..."
            placeholderTextColor="#5E5E5E"
            multiline
          />
          <TouchableOpacity style={styles.sendButton} onPress={handleSend}>
            <Text style={styles.sendButtonText}>Envoyer</Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  // ... vos styles ici
});
```

#### **2. Rendu et Style des Messages (Bulles de Chat)**

Chaque message dans le chat est généralement affiché sous forme de "bulle". Il est essentiel de distinguer les messages de l'utilisateur de ceux de l'IA (ou de l'interlocuteur).

*   **Structure de données des messages** : Chaque objet message devrait inclure au moins un `id` unique, le `text` du message et un `type` (par exemple, `'user'` ou `'support'`).

    ```javascript
    const [messages, setMessages] = useState([
      { id: '1', text: 'Bonjour!', type: 'support' },
      { id: '2', text: 'Salut!', type: 'user' },
    ]);
    ```

*   **Fonction `renderMessage`** : Cette fonction est passée à la prop `renderItem` de `FlatList`. Elle est responsable de l'affichage de chaque message.

    ```jsx
    const renderMessage = ({ item }) => {
      const isUserMessage = item.type === 'user';
      const bubbleStyle = [
        styles.bubble,
        isUserMessage ? styles.userBubble : styles.supportBubble,
      ];

      return (
        <View style={[styles.messageContainer, isUserMessage ? styles.userMessageContainer : styles.supportMessageContainer]}>
          {!isUserMessage && (
            // Avatar de l'IA (le "Z" que nous avons créé)
            <View style={styles.supportAvatar}>
              <Text style={styles.supportAvatarText}>Z</Text>
            </View>
          )}
          <View style={bubbleStyle}>
            <Text style={styles.messageText}>{item.text}</Text>
          </View>
        </View>
      );
    };
    ```

*   **Styles des bulles** : Utilisez des styles conditionnels pour les bulles de l'utilisateur et de l'IA, notamment pour la couleur de fond et l'alignement.

    ```javascript
    const styles = StyleSheet.create({
      // ...
      messageContainer: {
        marginVertical: 4,
        flexDirection: 'row',
        alignItems: 'flex-end', // Aligner le texte en bas de la bulle si l'avatar est plus grand
      },
      userMessageContainer: {
        justifyContent: 'flex-end', // Aligner à droite pour l'utilisateur
      },
      supportMessageContainer: {
        justifyContent: 'flex-start', // Aligner à gauche pour le support
      },
      supportAvatar: {
        width: 30,
        height: 30,
        borderRadius: 15, // Pour une forme de cercle
        marginRight: 8,
        justifyContent: 'center',
        alignItems: 'center',
      },
      supportAvatarText: {
        color: '#fff',
        fontSize: 20, // Taille ajustée pour l'esthétique
        fontWeight: 'bold',
      },
      bubble: {
        maxWidth: '75%', // Limite la largeur de la bulle
        paddingVertical: 10,
        paddingHorizontal: 15,
        borderRadius: 20, // Bords arrondis
      },
      userBubble: {
        backgroundColor: '#007AFF', // Couleur bleue pour les messages de l'utilisateur
        borderBottomRightRadius: 5, // Un coin moins arrondi pour un effet visuel
      },
      supportBubble: {
        backgroundColor: '#2C2C2E', // Couleur gris foncé pour les messages de support
        borderBottomLeftRadius: 5, // Un coin moins arrondi pour un effet visuel
      },
      messageText: {
        color: '#fff',
        fontSize: 16,
        lineHeight: 22,
      },
      // ...
    });
    ```

#### **3. Gestion du Clavier et Saisie de Texte**

La `KeyboardAvoidingView` est la clé pour que l'interface s'adapte au clavier.

*   **`behavior`** :
    *   `'padding'` (iOS) : Ajoute un `padding` au bas de la vue pour pousser le contenu vers le haut.
    *   `'height'` (Android) : Redimensionne la vue pour s'adapter à l'espace restant.
*   **`keyboardVerticalOffset`** : Permet d'ajouter un décalage vertical supplémentaire si nécessaire (utile pour les barres de navigation fixes).
*   **`TextInput`** :
    *   `multiline` : Permet au champ de saisie de s'agrandir sur plusieurs lignes.
    *   `onChangeText` et `value` : Pour gérer l'état du texte saisi.
    *   `Keyboard.dismiss()` : Important pour masquer le clavier après l'envoi d'un message.

    ```javascript
    import { Keyboard } from 'react-native';

    // ...
    const handleSend = () => {
      // ... logique d'envoi
      Keyboard.dismiss(); // Masquer le clavier après l'envoi
    };
    // ...
    ```

#### **4. Auto-scrolling des Messages**

Pour que les nouveaux messages soient toujours visibles, la `FlatList` doit défiler automatiquement vers le bas.

*   **`useRef`** : Pour obtenir une référence à la `FlatList`.
*   **`useEffect`** : Pour déclencher le défilement à chaque fois que la liste des messages est mise à jour.

    ```jsx
    import React, { useState, useRef, useEffect } from 'react';
    // ...

    export default function ChatInterface() {
      const [messages, setMessages] = useState([]);
      const flatListRef = useRef(null); // Créer une référence

      useEffect(() => {
        if (flatListRef.current) {
          flatListRef.current.scrollToEnd({ animated: true }); // Faire défiler vers la fin
        }
      }, [messages]); // Déclencher à chaque mise à jour des messages

      // ...
      <FlatList
        ref={flatListRef} // Attacher la référence
        // ...
      />
      // ...
    }
    ```

#### **5. Intégration API (Envoi/Réception de Messages)**

Bien que la documentation porte sur l'interface, il est crucial de mentionner la logique derrière l'envoi et la réception des messages.

*   **Fonction asynchrone pour l'envoi** : Utilisez `async/await` pour gérer les appels API de manière non bloquante.
*   **Gestion de l'état de chargement** : Affichez un indicateur de chargement (`ActivityIndicator`) pendant que la réponse de l'IA est en attente.
*   **Gestion des erreurs** : Affichez des messages d'erreur à l'utilisateur si l'appel API échoue.

    ```javascript
    import { ActivityIndicator } from 'react-native';
    // import { sendMessage } from '../config/openrouter'; // Votre fonction d'appel API

    export default function ChatInterface() {
      // ...
      const [isLoading, setIsLoading] = useState(false);

      const handleSend = async () => {
        if (inputText.trim().length === 0 || isLoading) return; // Empêche l'envoi de messages vides ou multiples

        const newMessage = {
          id: Date.now().toString(),
          text: inputText,
          type: 'user',
        };

        setMessages(prevMessages => [...prevMessages, newMessage]);
        setInputText('');
        Keyboard.dismiss();
        setIsLoading(true); // Activer l'indicateur de chargement

        try {
          // Exemple d'appel API (adaptez à votre fonction sendMessage)
          const aiResponse = await sendMessage([...messages, newMessage]);
          setMessages(prevMessages => [...prevMessages, {
            id: (Date.now() + 1).toString(),
            ...aiResponse // Supposons que aiResponse contient { text: "...", type: "support" }
          }]);
        } catch (error) {
          console.error("Erreur lors de l'envoi du message à l'IA:", error);
          setMessages(prevMessages => [...prevMessages, {
            id: (Date.now() + 1).toString(),
            text: "Une erreur est survenue. Veuillez réessayer.", // Message d'erreur pour l'utilisateur
            type: 'support'
          }]);
        } finally {
          setIsLoading(false); // Désactiver l'indicateur de chargement
        }
      };

      // ... dans le bouton d'envoi
      <TouchableOpacity
        style={[
          styles.sendButton,
          { backgroundColor: inputText.length > 0 && !isLoading ? '#007AFF' : 'transparent' }
        ]}
        onPress={handleSend}
        disabled={inputText.length === 0 || isLoading} // Désactiver le bouton si vide ou en chargement
      >
        {isLoading ? (
          <ActivityIndicator color="#007AFF" size="small" />
        ) : (
          <Ionicons name="arrow-up" size={20} color={inputText.length > 0 ? '#fff' : '#5E5E5E'} />
        )}
      </TouchableOpacity>
    }
    ```

#### **6. Bonnes Pratiques de Style**

*   **Feuilles de style (StyleSheet.create)** : Organisez vos styles dans un objet `StyleSheet.create` pour une meilleure lisibilité et performance.
*   **Flexbox** : Utilisez `flex: 1` pour que les vues prennent l'espace disponible et `flexDirection` pour l'alignement des éléments.
*   **Couleurs Thématiques** : Utilisez une palette de couleurs cohérente (ex: noir pour le fond, bleu pour les actions, gris pour les éléments secondaires).
*   **Dimensions relatives et absolues** : Privilégiez les dimensions relatives (`%`) ou les flexbox pour la réactivité, mais utilisez des dimensions absolues (`px`) pour les petits éléments comme les avatars ou icônes si leur taille fixe est cruciale.
*   **`Platform.OS`** : Utilisez `Platform.OS` pour ajuster les styles spécifiques à iOS ou Android, comme les `padding` des `TextInput`.

---

En suivant ces étapes et en utilisant les exemples fournis, vous pourrez construire une interface de chat robuste, esthétique et réactive dans votre application React Native. N'oubliez pas de tester régulièrement l'interface sur différents appareils et tailles d'écran pour assurer une expérience utilisateur optimale.
